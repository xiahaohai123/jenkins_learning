import java.text.SimpleDateFormat

String oldRpmDownloadPath = '/temp/xiahh/huawei-upgrade/huaweiit/history/rpms/'
def oldRpmMap = [
        'shterm2-fileclient': ['path': oldRpmDownloadPath,
                               'name': 'shterm2-fileclient-3.3.8-132.aca.noarch.rpm'],
        'shterm2-guiclient' : ['path': oldRpmDownloadPath,
                               'name': 'shterm2-guiclient-3.3.8-132.aca.noarch.rpm'],
        '3proxy'            : ['path': oldRpmDownloadPath,
                               'name': '3proxy-0.9.5-2.el7.x86_64.rpm']
]

pipeline {
    agent any
    environment {
        rpmJenkinsAuthenticationId = '3af1598d-3a55-402f-b59f-c12a8c34cad3'
        distroSpace = 'distro'
        distroSourceSpace = 'distroSource'
        distroSourceRpmSpace = "${distroSourceSpace}/rpms"
        branchName = "3.3.8-c-huaweiit"
        upgradeTemplateDir = "ris-huaweiit-upgrade-133"
        releaseNumber = "133"
        deployDate = "220930"
        upgradePackageDir = "${distroSpace}/aca_${branchName}_${releaseNumber}_euler_${deployDate}"
        upgradeSrcDir = "${upgradePackageDir}/packages"
        degradeSrcDir = "${upgradePackageDir}/old"
//        gitLabApiToken = "qWG7Gs_rwbAsq2Vp-g9U"
        gitLabApiToken = credentials("GITLAB_API_TOKEN")
        gitLabHost = "gitlab.shterm.com"
        oldRpmDwonloadHost = "10.13.0.5"
    }
    stages {
        stage('Prebuild') {
            steps {
                echo 'prebuild rpm'
                echo "The branch is ${env.BRANCH_NAME}"
                script {
                    echo "to reset workspace"
                    resetDistroWorkspace()
                }
            }
        }
        stage('Make the upgrade repos up to date') {
            steps {
                echo 'make the upgrade repos up to date'
            }
        }
        stage('Use template of upgrade directory in rpm-repos') {
            steps {
                script {
                    def upgradeDirPathInRepos = "../rpm-repos-trigger/distro/upgrade/${upgradeTemplateDir}" + ""
                    def permissionTable = [
                            'upgrade'                    : '700',
                            'check_scripts/pre_check.sh' : '755',
                            'check_scripts/pre_backup.sh': '755'
                    ]
                    if (!fileExists(upgradeDirPathInRepos)) {
                        error "con not find the path: ${upgradeDirPathInRepos}"
                    }
                    sh "\\cp -rf ${upgradeDirPathInRepos} ./${upgradePackageDir}"
                    if (!fileExists("${upgradePackageDir}")) {
                        error "failed to copy upgrade directory: ${upgradeTemplateDir} to workspace"
                    }
                    echo "copied template"
                    permissionTable.each { item ->
                        sh "chmod ${item.value} ${upgradePackageDir}/${item.key}"
                    }
                }
            }
        }
        stage('Build and get official rpm') {
            environment {
                jenkinsHost = "repos.shterm.com/jenkins"
                rpmDeployHost = "10.10.0.12"
                rpmDeployPath = "yum/shterm/x86_64/Packages"
                rpmDeployFullPath = "${rpmDeployHost}/${rpmDeployPath}"
                build3Proxy = 'true'
                buildFileClient = 'true'
                buildGuiClient = 'true'
                buildProjectId = "81"
            }
            failFast true
            parallel {
                stage('shterm2-fileclient') {
                    when {
                        environment name: 'buildFileClient', value: 'true'
                    }
                    environment {
                        projectName = 'shterm2-fileclient'
                        repoBuildPath = "shterm2-fileclient"
                        version = "3.3.8"
                        release = "133.aca"
                        buildArch = "noarch"
                        jobName = "shterm2-fileclient-3.3.8-c-huaweiit"
                        distRpmDir = "${upgradeSrcDir}/common"
                        degradeRpmDir = "${degradeSrcDir}/common"
                        srcProjectId = "250"
                    }
                    steps {
                        script {
                            RpmBuildItem fileClientBuildItem = new RpmBuildItem()
                            fileClientBuildItem.projectName = projectName
                            fileClientBuildItem.repoBuildPath = repoBuildPath
                            fileClientBuildItem.version = version
                            fileClientBuildItem.release = release
                            fileClientBuildItem.buildArch = buildArch
                            fileClientBuildItem.rpmJobName = jobName
                            fileClientBuildItem.srcRpmDir = distroSourceRpmSpace
                            fileClientBuildItem.distRpmDir = distRpmDir
                            fileClientBuildItem.srcProjectId = srcProjectId
                            fileClientBuildItem.buildProjectId = buildProjectId
                            fileClientBuildItem.srcProjectBranch = branchName
                            fileClientBuildItem.buildProjectBranch = branchName
                            fileClientBuildItem.degradeRpmDir = degradeRpmDir
                            fileClientBuildItem.jenkinsContext = this

                            def oldRpmData = oldRpmMap.get(projectName)
                            def path = oldRpmData.get('path')
                            def filename = oldRpmData.get('name')
                            fileClientBuildItem.remoteDegradeRpmDir = path
                            fileClientBuildItem.degradeRpmFilename = filename

                            fileClientBuildItem.buildAndAssemble()
                        }
                    }
                }
                stage('shterm2-guiclient') {
                    when {
                        environment name: 'buildGuiClient', value: 'true'
                    }
                    environment {
                        projectName = 'shterm2-guiclient'
                        repoBuildPath = "shterm2-guiclient"
                        version = "3.3.8"
                        release = "132.aca"
                        buildArch = "noarch"
                        jobName = "shterm2-guiclient-3.3.8-c-huaweiit"
                        distRpmDir = "${upgradeSrcDir}/common"
                        degradeRpmDir = "${degradeSrcDir}/common"
                        srcProjectId = "96"
                    }
                    steps {
                        script {
                            RpmBuildItem guiClientBuildItem = new RpmBuildItem()
                            guiClientBuildItem.projectName = projectName
                            guiClientBuildItem.repoBuildPath = repoBuildPath
                            guiClientBuildItem.version = version
                            guiClientBuildItem.release = release
                            guiClientBuildItem.buildArch = buildArch
                            guiClientBuildItem.rpmJobName = jobName
                            guiClientBuildItem.srcRpmDir = distroSourceRpmSpace
                            guiClientBuildItem.distRpmDir = distRpmDir
                            guiClientBuildItem.srcProjectId = srcProjectId
                            guiClientBuildItem.buildProjectId = buildProjectId
                            guiClientBuildItem.srcProjectBranch = branchName
                            guiClientBuildItem.buildProjectBranch = branchName
                            guiClientBuildItem.degradeRpmDir = degradeRpmDir
                            guiClientBuildItem.jenkinsContext = this

                            def oldRpmData = oldRpmMap.get(projectName)
                            def path = oldRpmData.get('path')
                            def filename = oldRpmData.get('name')
                            guiClientBuildItem.remoteDegradeRpmDir = path
                            guiClientBuildItem.degradeRpmFilename = filename

                            guiClientBuildItem.buildAndAssemble()
                        }
                    }
                }
                stage('3proxy') {
                    when {
                        environment name: 'build3Proxy', value: 'true'
                    }
                    environment {
                        projectName = '3proxy'
                        repoBuildPath = "3proxy"
                        version = "0.9.3"
                        release = "133.aca"
                        buildArch = "x86_64"
                        jobName = "3proxy-3.3.8-c-huaweiit"
                        distRpmDir = "${upgradeSrcDir}/3proxy"
                        degradeRpmDir = "${degradeSrcDir}/3proxy"
                        srcProjectId = "506"
                        srcProjectBranch = "master"
                    }
                    steps {
                        script {
                            RpmBuildItem thProxyClientBuildItem = new RpmBuildItem()
                            thProxyClientBuildItem.projectName = projectName
                            thProxyClientBuildItem.repoBuildPath = repoBuildPath
                            thProxyClientBuildItem.version = version
                            thProxyClientBuildItem.release = release
                            thProxyClientBuildItem.buildArch = buildArch
                            thProxyClientBuildItem.rpmJobName = jobName
                            thProxyClientBuildItem.srcRpmDir = distroSourceRpmSpace
                            thProxyClientBuildItem.distRpmDir = distRpmDir
                            thProxyClientBuildItem.srcProjectId = srcProjectId
                            thProxyClientBuildItem.buildProjectId = buildProjectId
                            thProxyClientBuildItem.srcProjectBranch = srcProjectBranch
                            thProxyClientBuildItem.buildProjectBranch = branchName
                            thProxyClientBuildItem.degradeRpmDir = degradeRpmDir
                            thProxyClientBuildItem.jenkinsContext = this

                            def oldRpmData = oldRpmMap.get(projectName)
                            def path = oldRpmData.get('path')
                            def filename = oldRpmData.get('name')
                            thProxyClientBuildItem.remoteDegradeRpmDir = path
                            thProxyClientBuildItem.degradeRpmFilename = filename

                            thProxyClientBuildItem.buildAndAssemble()
                        }
                    }
                }
            }
        }
        stage('Get lib') {
            steps {
                echo 'get lib'
            }
        }
        stage('Build tar') {
            steps {
                sh "tar cvf ${upgradePackageDir}.tar ${upgradePackageDir}"
                script {
                    if (!fileExists("${upgradePackageDir}.tar")) {
                        error "failed to package ${upgradePackageDir} to ${upgradePackageDir}.tar"
                    } else {
                        echo "succeed to package ${upgradePackageDir} to ${upgradePackageDir}.tar"
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                echo 'deploy'
            }
        }
    }
}


private void resetDistroWorkspace() {
    echo "to delete dir"
    sh "rm -rf ${distroSpace}"
    echo "to create dir"
    sh "mkdir ${distroSpace}"
    echo "to create sdir"
    createDirIfNotExist(distroSourceSpace)
    createDirIfNotExist(distroSourceRpmSpace)
}

private void createDirIfNotExist(dirPath) {
    if (!fileExists(dirPath)) {
        sh "mkdir -p ${dirPath}"
    }
}

/**
 * 将Date对象格式化为gitlab用的时间字符串
 * @param rpmBuildDate date对象
 * @return ISO 8601标准时间字符串
 */
private String formatDate4Gitlab(Date rpmBuildDate) {
    SimpleDateFormat gitlabSdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ")
    gitlabSdf.setTimeZone(TimeZone.getTimeZone("UTC"))
    return gitlabSdf.format(rpmBuildDate)
}

class RpmBuildItem {
    String projectName
    String repoBuildPath
    String version
    String release
    String buildArch
    String rpmJobName
    String srcRpmDir
    /** 装配到升级包的rpm存放目录 */
    String distRpmDir
    String srcProjectId
    String buildProjectId
    String buildProjectBranch
    String srcProjectBranch
    /** 降级用安装包存放目录 */
    String degradeRpmDir
    String remoteDegradeRpmDir
    String degradeRpmFilename
    /** jenkins 上下文，用以访问jenkinsfile pipeline可访问的资源 */
    def jenkinsContext
    /** rpm包文件名 */
    private String rpmFilename
    /** 下载到rpm包资源目录的rpm包源路径 */
    private String srcRpmPath
    /** 装配到升级包的rpm路径 */
    private String distRpmPath
    /** 用以从外部文件服务器下载构建完毕的rpm包的下载链接 */
    private String downloadUrl

    private void init() {
        rpmFilename = "${projectName}-${version}-${release}.${buildArch}.rpm" + ""
        srcRpmPath = "${srcRpmDir}/${rpmFilename}" + ""
        downloadUrl = "http://${jenkinsContext.rpmDeployFullPath}/${rpmFilename}" + ""
        distRpmPath = "${distRpmDir}/${rpmFilename}" + ""
    }

    /** 构建rpm并装配进升级包 */
    void buildAndAssemble() {
        init()
        boolean shouldUpdateRpm = checkIfRpmShouldUpdate()
        if (shouldUpdateRpm) {
            buildAndDownloadRpm()
        }
        assembleUpgrade()
        assembleDegrade()
    }

    private void assembleUpgrade() {
        jenkinsContext.createDirIfNotExist(distRpmDir)
        jenkinsContext.sh "cp -p ${srcRpmPath} ${distRpmPath}"
        jenkinsContext.echo "${rpmFilename} assembled for upgrade"
    }

    private void assembleDegrade() {
        def downloadUrl = "http://${jenkinsContext.oldRpmDwonloadHost}${remoteDegradeRpmDir}${degradeRpmFilename}" + ""
        jenkinsContext.createDirIfNotExist(degradeRpmDir)
        def degradeRpmPath = "${degradeRpmDir}/${degradeRpmFilename}" + ""
        if (isResourceDownloadable(downloadUrl)) {
            jenkinsContext.sh "curl -s -R ${downloadUrl} -o ${degradeRpmPath}"
            jenkinsContext.echo "${degradeRpmFilename} assembled for degrade"
        } else {
            jenkinsContext.error "there is no ${degradeRpmFilename} in old rpm server"
        }
    }

    private void buildAndDownloadRpm() {
        jenkinsContext.echo "build ${projectName} rpm"
        int pollDuration = 10
        def jobUrl = "http://${jenkinsContext.jenkinsHost}/view/HUAWEI/job/3.3.8-c-huaweiit/job/${rpmJobName}" + ""
        int nextBuildNumber = getNextBuilderNumber(jenkinsContext.rpmJenkinsAuthenticationId, jobUrl)
        jenkinsContext.echo("the nextBuildNumber of ${projectName} : ${nextBuildNumber}")
        createBuild(jenkinsContext.rpmJenkinsAuthenticationId, jobUrl)
        pollBuildStatus(nextBuildNumber, pollDuration, jenkinsContext.rpmJenkinsAuthenticationId, jobUrl)
        if (isResourceDownloadable(downloadUrl)) {
            jenkinsContext.echo "downloading ${projectName} rpm to workspace"
            downloadRpmToSrc()
        } else {
            jenkinsContext.error "failed to build ${rpmFilename}"
        }
        if (jenkinsContext.fileExists(srcRpmPath)) {
            jenkinsContext.echo "succeed to download ${projectName}"
        } else {
            jenkinsContext.error "failed to download ${projectName}"
        }
    }

    private void downloadRpmToSrc() {
        jenkinsContext.sh "curl -s -R ${downloadUrl} -o ${srcRpmPath}"
    }

    private void pollBuildStatus(int buildNumber, int pollDuration, authentication, jobUrl) {
        while (true) {
            def buildInfoResponse = jenkinsContext.httpRequest authentication: authentication,
                    validResponseCodes: '200,404', url: "${jobUrl}/${buildNumber}/api/json?pretty=true"
            if (buildInfoResponse.status == 404) {
                jenkinsContext.echo "The created build is not building, wait for building."
                jenkinsContext.sleep pollDuration
                continue
            }
            if (buildInfoResponse.status != 200) {
                jenkinsContext.error("failed to get build information for ${projectName}")
            }
            def jsonBuildInfoResponse = jenkinsContext.readJSON text: buildInfoResponse.content
            boolean building = jsonBuildInfoResponse.building
            def result = jsonBuildInfoResponse.result
            if (building) {
                jenkinsContext.echo "still in building, wait ${pollDuration} seconds"
            } else {
                if ('SUCCESS' != result) {
                    jenkinsContext.error("failed to build ${projectName}")
                } else {
                    jenkinsContext.echo "succeed to build ${projectName}"
                    break
                }
            }
            jenkinsContext.sleep pollDuration
        }
    }

    private void createBuild(authentication, jobUrl) {
        def newBuildResponse = jenkinsContext.httpRequest authentication: authentication, url: "${jobUrl}/build",
                httpMode: 'POST'
        if (newBuildResponse.status != 201) {
            jenkinsContext.error("failed to create build of ${projectName}")
        }
        jenkinsContext.echo "succeed to create build of ${projectName}"
    }

    private int getNextBuilderNumber(authentication, jobUrl) {
        def response = jenkinsContext.httpRequest authentication: authentication, url: "${jobUrl}/api/json?pretty=true"
        if (response.status != 200) {
            jenkinsContext.error("failed to get job information for ${projectName}")
        }
        jenkinsContext.echo "succeed to get job information of ${projectName}"
        def jsonResponse = jenkinsContext.readJSON text: response.content
        int nextBuildNumber = jsonResponse.nextBuildNumber
        return nextBuildNumber
    }

    private boolean checkIfRpmShouldUpdate() {
        jenkinsContext.echo "check if ${rpmFilename} should be update"
        Date rpmBuildDate = getRpmBuildDate(srcRpmPath)
        boolean shouldUpdateRpm = false
        if (rpmBuildDate != null) {
            jenkinsContext.echo "the last build date of ${rpmFilename} is: ${rpmBuildDate}"
            boolean srcProjectUpdate = ifSrcProjectUpdate(srcProjectId, srcProjectBranch, rpmBuildDate)
            boolean buildProjectUpdate = isBuildProjectUpdate(buildProjectId, buildProjectBranch, repoBuildPath,
                    rpmBuildDate)
            if (srcProjectUpdate || buildProjectUpdate) {
                shouldUpdateRpm = true
            }
        } else {
            jenkinsContext.echo "can not get build date of ${rpmFilename}, update rpm"
            shouldUpdateRpm = true
        }
        return shouldUpdateRpm
    }

    private Date getRpmBuildDate(String rpmPath) {
        if (!jenkinsContext.fileExists(rpmPath)) {
            tryDownloadRpmFromDeploy()
        }
        if (!jenkinsContext.fileExists(rpmPath)) {
            return null
        }
        String shResponse = jenkinsContext.sh(script: "rpm -qpi ${rpmPath}", returnStdout: true)
        String matchString = "Build Date  : "
        def lines = shResponse.split('\n')
        for (line in lines) {
            if (line.startsWith(matchString)) {
                String buildDate = line.substring(matchString.length())
                SimpleDateFormat srcSdf = new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy", Locale.ENGLISH)
                srcSdf.setTimeZone(TimeZone.getTimeZone("Asia/Shanghai"))
                return srcSdf.parse(buildDate)
            }
        }
        return null
    }

    private tryDownloadRpmFromDeploy() {
        if (isResourceDownloadable(downloadUrl)) {
            downloadRpmToSrc()
        }
    }

    private boolean isResourceDownloadable(String downloadUrl) {
        String headers = jenkinsContext.sh(script: "curl --head ${downloadUrl}", returnStdout: true)
        String matchString = "HTTP/1.1 "
        def lines = headers.split('\n')
        for (line in lines) {
            if (line.startsWith(matchString) && line.contains('200 OK')) {
                jenkinsContext.echo "there is a ${rpmFilename} in deploy server"
                return true
            }
        }
        jenkinsContext.echo "there is no ${rpmFilename} in deploy server"
        return false
    }

    private boolean ifSrcProjectUpdate(String projectId, String branchName, Date rpmBuildDate) {
        String formattedDate = formatDate4Gitlab(rpmBuildDate)
        def response = jenkinsContext.httpRequest ignoreSslErrors: true,
                customHeaders: [[name: "PRIVATE-TOKEN", value: jenkinsContext.gitLabApiToken]],
                url: "https://${jenkinsContext.gitLabHost}/api/v4/projects/${projectId}/repository/commits?" +
                        "since=${formattedDate}&ref_name=${branchName}"
        if (response.status != 200) {
            jenkinsContext.error("failed to query gitlab for update info")
        }
        def jsonResponse = jenkinsContext.readJSON text: response.content
        def commitQuantity = jsonResponse.size()
        if (commitQuantity == 0) {
            jenkinsContext.echo "there is no commit for project: ${projectId} branch: ${branchName} since ${rpmBuildDate}"
            return false
        } else {
            jenkinsContext.echo "there are ${commitQuantity} commits for project: ${projectId} branch :${branchName}" +
                    " since ${rpmBuildDate}"
            return true
        }
    }


    private boolean isBuildProjectUpdate(String projectId, String branchName, String path, Date rpmBuildDate) {
        String formattedDate = formatDate4Gitlab(rpmBuildDate)
        def response = jenkinsContext.httpRequest ignoreSslErrors: true,
                customHeaders: [[name: "PRIVATE-TOKEN", value: jenkinsContext.gitLabApiToken]],
                url: "https://${jenkinsContext.gitLabHost}/api/v4/projects/${projectId}/repository/commits?" +
                        "since=${formattedDate}&ref_name=${branchName}&path=${path}"
        if (response.status != 200) {
            jenkinsContext.error("failed to query gitlab for update info")
        }
        def jsonResponse = jenkinsContext.readJSON text: response.content
        def commitQuantity = jsonResponse.size()
        if (commitQuantity == 0) {
            jenkinsContext.echo "there is no commit for project: ${projectId} branch: ${branchName} " +
                    "since ${rpmBuildDate} in path:${path}"
            return false
        } else {
            jenkinsContext.echo "there are ${commitQuantity} commits for project: ${projectId} branch: ${branchName} " +
                    "since ${rpmBuildDate} in path: ${path}"
            return true
        }
    }

    /**
     * 将Date对象格式化为gitlab用的时间字符串
     * @param rpmBuildDate date对象
     * @return ISO 8601标准时间字符串
     */
    private String formatDate4Gitlab(Date rpmBuildDate) {
        SimpleDateFormat gitlabSdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ")
        gitlabSdf.setTimeZone(TimeZone.getTimeZone("UTC"))
        return gitlabSdf.format(rpmBuildDate)
    }
}