import java.text.SimpleDateFormat

pipeline {
    agent any
    environment {
        rpmJenkinsAuthenticationId = '3af1598d-3a55-402f-b59f-c12a8c34cad3'
        distroSpace = 'distro'
        distroSourceSpace = 'distroSource'
        distroSourceRpmSpace = "${distroSourceSpace}/rpms"
        upgradeDir = "ris-huaweiit-upgrade-133"
        upgradeSrcDir = "${upgradeDir}/packages"
        degradeSrcDir = "${upgradeDir}/old"
        branchName = "3.3.8-c-huaweiit"
        gitLabApiToken = "qWG7Gs_rwbAsq2Vp-g9U"
        gitLabHost = "gitlab.shterm.com"
    }
    stages {
        stage('Prebuild') {
            steps {
                echo 'prebuild rpm'
                echo "The branch is ${env.BRANCH_NAME}"
                script {
                    echo "to reset workspace"
                    resetDistroWorkspace()
                }
            }
        }
        stage('Make the upgrade repos up to date') {
            steps {
                echo 'make the upgrade repos up to date TODO'
            }
        }
        stage('Use template of upgrade directory in rpm-repos') {
            steps {
                script {
                    def upgradeDirPathInRepos = "../rpm-repos-trigger/distro/upgrade/${upgradeDir}" + ""
                    def permissionTable = [
                            'upgrade'                    : '700',
                            'check_scripts/pre_check.sh' : '755',
                            'check_scripts/pre_backup.sh': '755'
                    ]
                    if (!fileExists(upgradeDirPathInRepos)) {
                        error "con not find the path: ${upgradeDirPathInRepos}"
                    }
                    sh "\\cp -rf ${upgradeDirPathInRepos} ./${distroSpace}/"
                    if (!fileExists("${distroSpace}/${upgradeDir}")) {
                        error "failed to copy upgrade directory: ${upgradeDir} to workspace"
                    }
                    echo "copied template"
                    permissionTable.each { item ->
                        sh "chmod ${item.value} ${distroSpace}/${upgradeDir}/${item.key}"
                    }
                }
            }
        }
        stage('Build and get official rpm') {
            environment {
                jenkinsHost = "repos.shterm.com/jenkins"
                rpmDeployHost = "10.10.0.12"
                rpmDeployPath = "yum/shterm/x86_64/Packages"
                rpmDeployFullPath = "${rpmDeployHost}/${rpmDeployPath}"
                build3Proxy = 'false'
                buildFileClient = 'true'
                buildProjectId = "81"
            }
            failFast true
            parallel {
                stage('shterm2-fileclient') {
                    when {
                        environment name: 'buildFileClient', value: 'true'
                    }
                    environment {
                        buildProject = 'shterm2-fileclient'
                        version = "3.3.8"
                        release = "133.aca"
                        buildArch = "noarch"
                        jobName = "shterm2-fileclient-3.3.8-c-huaweiit"
                        rpmFilename = "${buildProject}-${version}-${release}.${buildArch}.rpm"
                        downloadUrl = "http://${rpmDeployFullPath}/${rpmFilename}"
                        srcRpmPath = "${distroSourceRpmSpace}/${rpmFilename}"
                        distRpmDir = "${distroSpace}/${upgradeSrcDir}/common"
                        distRpmPath = "${distRpmDir}/${rpmFilename}"
                        srcProjectId = "250"
                    }
                    steps {
                        script {
                            echo "check if ${buildProject}.rpm should be update"
                            // 不明原因，请求gitlab需要将时间减少8h
                            boolean updateRpm = false
                            Date rpmBuildDate = getRpmBuildDate(srcRpmPath)
                            if (rpmBuildDate != null) {
                                echo "the last build date of ${buildProject} is: ${rpmBuildDate.toString()}"
                                boolean srcProjectUpdate = ifSrcProjectUpdate(srcProjectId, branchName, rpmBuildDate)
                                if (srcProjectUpdate) {
                                    updateRpm = true
                                }
                            } else {
                                echo "can not get build date of ${buildProject}, update rpm"
                                updateRpm = true
                            }
                            // 检查在Source目录下的rpm的buildDate
                            // 通过gitlab检查对应项目对应分支是否有commit更新
                            // 通过gitlab检查rpm-repos对应分支的对应项目构建目录下是否有新commit

                            if (updateRpm) {
                                echo "build ${buildProject} rpm"
                                int timeToPolling = 10
                                def jobUrl = "http://${jenkinsHost}/view/HUAWEI/job/3.3.8-c-huaweiit/job/${jobName}" + ""
                                int nextBuildNumber = getNextBuilderNumber(buildProject, rpmJenkinsAuthenticationId, jobUrl)
                                echo("the nextBuildNumber of ${buildProject} : ${nextBuildNumber}")
                                createBuild(buildProject, rpmJenkinsAuthenticationId, jobUrl)
                                pollBuildStatus(nextBuildNumber, timeToPolling, buildProject, rpmJenkinsAuthenticationId, jobUrl)
                                echo "downloading ${buildProject} rpm to workspace"
                                sh "curl -s -R ${downloadUrl} -o ${srcRpmPath}"
                                if (fileExists(srcRpmPath)) {
                                    echo "succeed to download ${buildProject}"
                                } else {
                                    error "failed to download ${buildProject}"
                                }
                            }

                            createDirIfNotExist(distRpmDir)
                            sh "cp ${srcRpmPath} ${distRpmPath}"
                        }
                    }
                }
                stage('3proxy') {
                    when {
                        environment name: 'build3Proxy', value: 'true'
                    }
                    environment {
                        buildProject = '3proxy'
                        version = "0.9.3"
                        release = "133.aca"
                        buildArch = "x86_64"
                        jobName = "3proxy-3.3.8-c-huaweiit"
                    }
                    steps {
                        echo "build ${buildProject} rpm"

                        script {
                            int timeToPolling = 10
                            def jobUrl = "http://${jenkinsHost}/view/HUAWEI/job/3.3.8-c-huaweiit/job/${jobName}" + ""
                            int nextBuildNumber = getNextBuilderNumber(buildProject, rpmJenkinsAuthenticationId, jobUrl)
                            echo("the nextBuildNumber of ${buildProject} : ${nextBuildNumber}")

                            createBuild(buildProject, rpmJenkinsAuthenticationId, jobUrl)

                            pollBuildStatus(nextBuildNumber, timeToPolling, buildProject, rpmJenkinsAuthenticationId, jobUrl)

                            echo "downloading ${buildProject} rpm to workspace"
                            def rpmFilename = "${buildProject}-${version}-${release}.${buildArch}.rpm" + ""
                            sh "curl -s -R -O http://${rpmDeployHost}/${rpmDeployPath}/${rpmFilename}"
                            if (fileExists(rpmFilename)) {
                                echo "succeed to download ${buildProject}"
                            } else {
                                error "failed to download ${buildProject}"
                            }
                        }
                    }
                }
            }
        }
        stage('get official old rpm') {
            steps {
                echo 'get official old rpm'
            }
        }
        stage('get official new script') {
            steps {
                echo 'get official new script'
            }
        }
        stage('get official old script') {
            steps {
                echo 'get official old script'
            }
        }
        stage('get lib') {
            steps {
                echo 'get lib'
            }
        }
        stage('deploy') {
            steps {
                echo 'deploy'
            }
        }
    }
}

private void resetDistroWorkspace() {
    echo "to delete dir"
    sh "rm -rf ${distroSpace}"
    echo "to create dir"
    sh "mkdir ${distroSpace}"
    echo "to create sdir"
    createDirIfNotExist(distroSourceSpace)
    createDirIfNotExist(distroSourceRpmSpace)
}

private void createDirIfNotExist(dirPath) {
    if (!fileExists(dirPath)) {
        sh "mkdir ${dirPath}"
    }
}

private void pollBuildStatus(int buildNumber, int timeToPolling, buildProject, authentication, jobUrl) {
    while (true) {
        def buildInfoResponse = httpRequest authentication: authentication, validResponseCodes: '200,404',
                url: "${jobUrl}/${buildNumber}/api/json?pretty=true"
        if (buildInfoResponse.status == 404) {
            echo "The created build is not building, wait for building."
            sleep timeToPolling
            continue
        }
        if (buildInfoResponse.status != 200) {
            error("failed to get build information for ${buildProject}")
        }
        def jsonBuildInfoResponse = readJSON text: buildInfoResponse.content
        boolean building = jsonBuildInfoResponse.building
        def result = jsonBuildInfoResponse.result
        if (building) {
            echo "still in building, wait ${timeToPolling} seconds"
        } else {
            if ('SUCCESS' != result) {
                error("failed to build ${buildProject}")
            } else {
                echo "succeed to build ${buildProject}"
                break
            }
        }
        sleep timeToPolling
    }
}

private void createBuild(buildProject, authentication, jobUrl) {
    def newBuildResponse = httpRequest authentication: authentication, url: "${jobUrl}/build", httpMode: 'POST'
    if (newBuildResponse.status != 201) {
        error("failed to create build of ${buildProject}")
    }
    echo "succeed to create build of ${buildProject}"
}

private int getNextBuilderNumber(buildProject, authentication, jobUrl) {
    def response = httpRequest authentication: authentication, url: "${jobUrl}/api/json?pretty=true"
    if (response.status != 200) {
        error("failed to get job information for ${buildProject}")
    }
    echo "succeed to get job information of ${buildProject}"
    def jsonResponse = readJSON text: response.content
    int nextBuildNumber = jsonResponse.nextBuildNumber
    return nextBuildNumber
}

private Date getRpmBuildDate(rpmPath) {
    if (!fileExists(rpmPath)) {
        return null
    }
    String shResponse = sh(script: "rpm -qpi ${rpmPath}", returnStdout: true)
    String matchString = "Build Date  : "
    def lines = shResponse.split('\n')
    for (line in lines) {
        if (line.startsWith(matchString)) {
            String buildDate = line.substring(matchString.length())
            SimpleDateFormat srcSdf = new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy", Locale.ENGLISH)
            srcSdf.setTimeZone(TimeZone.getTimeZone("Asia/Shanghai"))
            return srcSdf.parse(buildDate)
        }
    }
    return null
}

private boolean ifSrcProjectUpdate(String projectId, String branchName, rpmBuildDate) {
    SimpleDateFormat gitlabSdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss")
    gitlabSdf.setTimeZone(TimeZone.getTimeZone("UTC"))
    String formattedDate = gitlabSdf.format(rpmBuildDate)
    def response = httpRequest ignoreSslErrors: true, customHeaders: [[name: "PRIVATE-TOKEN", value: gitLabApiToken]],
            url: "https://${gitLabHost}/api/v4/projects/${projectId}/repository/commits?since=${formattedDate}&ref_name=${branchName}"
    if (response.status != 200) {
        error("failed to query gitlab for update info")
    }
    echo response.content
    def jsonResponse = readJSON text: response.content
    // todo 工作断点
    echo jsonResponse.length
    if (jsonResponse.length == 0) {
        echo "no commits"
    } else {
        echo "there is some commits"
    }
    return false
}