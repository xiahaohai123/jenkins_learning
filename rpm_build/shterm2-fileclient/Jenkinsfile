map = ['']

pipeline {
    agent any
    environment {
        rpmJenkinsAuthenticationId = '3af1598d-3a55-402f-b59f-c12a8c34cad3'
    }
    stages {
        stage('prebuild') {
            steps {
                echo 'prebuild rpm'
            }
        }
        stage('build and get official rpm') {
            environment {
                jenkinsHost = "repos.shterm.com/jenkins"
                rpmDeployHost = "10.10.0.12"
                rpmDeployPath = "yum/shterm/x86_64/Packages"
            }
            failFast true
            parallel {
                stage('build shterm2-fileclient') {
                    environment {
                        buildProject = 'shterm2-fileclient'
                        version = "3.3.8"
                        release = "133.aca"
                        buildArch = "noarch"
                    }
                    steps {
                        echo 'build shterm2-fileclient rpm'
                        script {
                            int timeToPolling = 10
                            def jobUrl = "http://${jenkinsHost}/view/HUAWEI/job/3.3.8-c-huaweiit/job/shterm2-fileclient-3.3.8-c-huaweiit"
                            int nextBuildNumber = getNextBuilderNumber(buildProject, rpmJenkinsAuthenticationId, jobUrl)
                            echo("the nextBuildNumber of ${buildProject} : ${nextBuildNumber}")

                            createBuild(buildProject, rpmJenkinsAuthenticationId, jobUrl)

                            pollBuildStatus(nextBuildNumber, timeToPolling, buildProject, rpmJenkinsAuthenticationId, jobUrl)
                        }

                        echo "downloading shterm2-fileclient rpm to workspace"

                        def rpmFilename = "${buildProject}-${version}-${release}.${buildArch}.rpm"
                        sh "curl -s -R -O http://${rpmDeployHost}/${rpmDeployPath}/${rpmFilename}"
                        script {
                            if (fileExists(rpmFilename)) {
                                echo "succeed to download ${buildProject}"
                            } else {
                                error "failed to download ${buildProject}"
                            }
                        }
                    }
                }
                stage('build 3proxy') {
                    steps {
                        echo 'build 3proxy rpm'
                    }
                }
            }
        }
        stage('get official old rpm') {
            steps {
                echo 'get official old rpm'
            }
        }
        stage('get official new script') {
            steps {
                echo 'get official new script'
            }
        }
        stage('get official old script') {
            steps {
                echo 'get official old script'
            }
        }
        stage('get lib') {
            steps {
                echo 'get lib'
            }
        }
        stage('build upgrade package') {
            steps {
                echo 'build upgrade package'
            }
        }
        stage('deploy') {
            steps {
                echo 'deploy'
            }
        }
    }
}

private void pollBuildStatus(int buildNumber, int timeToPolling, buildProject, authentication, jobUrl) {
    while (true) {
        def buildInfoResponse = httpRequest authentication: authentication, validResponseCodes: '200,404',
                url: "${jobUrl}/${buildNumber}/api/json?pretty=true"
        if (buildInfoResponse.status == 404) {
            echo "The created build is not building, wait for building."
            sleep timeToPolling
            continue
        }
        if (buildInfoResponse.status != 200) {
            error("failed to get build information for ${buildProject}")
        }
        def jsonBuildInfoResponse = readJSON text: buildInfoResponse.content
        boolean building = jsonBuildInfoResponse.building
        def result = jsonBuildInfoResponse.result
        if (building) {
            echo "still in building, wait ${timeToPolling} seconds"
        } else {
            if ('SUCCESS' != result) {
                error("failed to build ${buildProject}")
            } else {
                echo "succeed to build ${buildProject}"
                break
            }
        }
        sleep timeToPolling
    }
}

private void createBuild(buildProject, authentication, jobUrl) {
    def newBuildResponse = httpRequest authentication: authentication, url: "${jobUrl}/build", httpMode: 'POST'
    if (newBuildResponse.status != 201) {
        error("failed to create build of ${buildProject}")
    }
    echo "succeed to create build of ${buildProject}"
}

private int getNextBuilderNumber(buildProject, authentication, jobUrl) {
    def response = httpRequest authentication: authentication, url: "${jobUrl}/api/json?pretty=true"
    if (response.status != 200) {
        error("failed to get job information for ${buildProject}")
    }
    echo "succeed to get job information of ${buildProject}"
    def jsonResponse = readJSON text: response.content
    int nextBuildNumber = jsonResponse.nextBuildNumber
    return nextBuildNumber
}